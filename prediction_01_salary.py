# -*- coding: utf-8 -*-
"""prediction-01-salary

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s9X5wnX-mIaEAqUsz3WEW_5xf12Qws19
"""

#PREDIKSI GAJI PEGAWAI
#Mengevaluasi hal yang mempengaruhi gaji pegawai
#Memprediksi gaji pegawai baru
#Target = salary
#Features = numeric: age, experience_years
#         = categorical: gender, department, job_title, location
#

#Import semua library
import pandas as pd
import numpy as np

from google.colab import files
uploaded = files.upload()

#Membuat fungsi untuk membaca data
df = pd.read_csv("Employers_data.csv")

print(df.head(2))

#Standarisasi kolom
df.columns = df.columns.str.lower().str.strip().str.replace(' ', '_')

print(df.head(2))
print(df.dtypes)

#Memilih kolom atau data yang diperlukan untuk prediksi
#Target = salary (y)
#Features = numeric: age, experience_years
#         = categorical: gender, department, job_title, location
cols = ['salary', 'age', 'experience_years', 'gender', 'job_title', 'location', 'department']
df = df[cols].copy()

#Membersihkan row salary dari missing values
df = df.dropna(subset=['salary'])

print(df.head(2))

#Handle missing values
for c in ['age','experience_years']:
    if df[c].isna().any():
        df[c] = df[c].fillna(df[c].median())

for c in ['gender','department','job_title','location']:
    if df[c].isna().any():
        df[c] = df[c].fillna('Unknown')

print(df.isna().sum())
print(df.shape)

#Split data train dan test
from sklearn.model_selection import train_test_split
X = df.drop(columns=['salary']) #drop  columns salary, lalu disimpan dengan x
y = df['salary'] #column salary, diambil sebagai target

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.2, random_state=42)
#X (besar) artinya fitur, atau matrix of features yang bisa menampung banyak columns (age, job_title, etc)
#y (kecil) artinya vector of target, biasanya hanya mengandung satu column (salary)

X_train.shape, X_test.shape

#Membangun preprocessing dan baseline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

numeric_features = ['age', 'experience_years']
categorical_features = ['gender','department','job_title','location']

preprocess = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numeric_features),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
    ]
)

#Baseline
baseline_prediction = np.full(shape=y_test.shape, fill_value=y_train.mean())

baseline_mae  = mean_absolute_error(y_test, baseline_prediction)
baseline_mse  = mean_squared_error(y_test, baseline_prediction)
baseline_rmse = np.sqrt(baseline_mse)
baseline_r2   = r2_score(y_test, baseline_prediction)

print(f"Baseline → MAE: {baseline_mae:,.0f} | RMSE: {baseline_rmse:,.0f} | R²: {baseline_r2:.3f}")

#Model Linear Regression
from sklearn.linear_model import LinearRegression

linereg = Pipeline(steps=[
    ('prep', preprocess),
    ('model', LinearRegression())
])

linereg.fit(X_train, y_train)
pred = linereg.predict(X_test)

mae  = mean_absolute_error(y_test, pred)
mse  = mean_squared_error(y_test, pred)
rmse = np.sqrt(mse)
r2   = r2_score(y_test, pred)

print(f"LinearRegression → MAE: {mae:,.0f} | RMSE: {rmse:,.0f} | R²: {r2:.3f}")

#Model Ridge Regression
from sklearn.linear_model import RidgeCV

ridge = Pipeline(steps=[
    ('prep', preprocess),
    ('model', RidgeCV(alphas=[0.1, 1.0, 10.0]))
])

ridge.fit(X_train, y_train)
pred_r = ridge.predict(X_test)

mae_r  = mean_absolute_error(y_test, pred_r)
mse_r  = mean_squared_error(y_test, pred_r)
rmse_r = np.sqrt(mse_r)
r2_r   = r2_score(y_test, pred_r)
print(f"RidgeCV → MAE: {mae_r:,.0f} | RMSE: {rmse_r:,.0f} | R²: {r2_r:.3f} | alpha: {ridge.named_steps['model'].alpha_}")

#Residual Plot atau beda nilali asli dengan nilai prediksi
import matplotlib.pyplot as plt

residuals = y_test - pred
plt.figure(figsize=(6,4))
plt.scatter(pred, residuals, alpha=0.6)
plt.axhline(0, linestyle='--')
plt.xlabel("Predicted Salary")
plt.ylabel("Residual (y_true - y_pred)")
plt.title("Residual Plot (Linear Regression)")
plt.show()

#Melihat fitur yang paling berpengaruh
ohe = linereg.named_steps['prep'].named_transformers_['cat']
ohe_features = ohe.get_feature_names_out(categorical_features)

feature_names = np.r_[numeric_features, ohe_features]
coefs = linereg.named_steps['model'].coef_

coef_df = pd.DataFrame({'feature': feature_names, 'coef': coefs}) \
            .sort_values('coef', key=abs, ascending=False)

coef_df.head(15)

#Prediksi salary pekerja baru
new_people = pd.DataFrame([
    {'age': 29, 'gender': 'Female', 'department': 'IT', 'job_title': 'Data Analyst',
     'experience_years': 3, 'location': 'Seattle'},
    {'age': 38, 'gender': 'Male', 'department': 'Finance', 'job_title': 'Manager',
     'experience_years': 12, 'location': 'New York'},
])

print(linereg.predict(new_people))